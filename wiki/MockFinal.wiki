#labels Usage
== Mocking final methods or classes ==

=== Quick summary ===

  # Use the `@RunWith(PowerMockRunner.class)` annotation at the class-level of the test case.
  # Use the `@PrepareForTest(ClassWithFinal.class)` annotation at the class-level of the test case.
  # Use `PowerMock.createMock(ClassWithFinal.class)` to create a mock object for all methods of this class.
  # Use `PowerMock.replay(ClassWithFinal.class)` to change the class to replay mode.
  # Use `PowerMock.verify(ClassWithFinal.class)` to change the class to verify mode.

=== Example ===

Let's assume you're using a third-party library that contains a class called `StateHolder`. For whatever reason this class is final and not only that, the methods are final as well. Imagine also that you need to use this class in your code and you'd still like to be able to unit test your own code in separation. `StateHolder` looks like this:

{{{
public final class StateHolder {

	public final String getState() {
		/* Imagine that we query a database for state, 
                   this is not something we want to do in a unit test */
		return null;
	}
}}}


In this example we call the class using an instance of the `StateHolder` for `StateFormatter` and it looks like this:

{{{
public class StateFormatter {

	private final StateHolder stateHolder;

	public StateFormatter(StateHolder stateHolder) {
		this.stateHolder = stateHolder;
	}

	public String getFormattedState() {
		String safeState = "State information is missing";
		final String actualState = stateHolder.getState();
		if (actualState != null) {
			safeState = actualState;
		}
		return safeState;
	}
}
}}}

If we are to test the `getFormattedState` method in separation we need to create a mock of the `StateHolder` class and be able to expect the call to `stateHolder.getState()`. PowerMock's `createMock` method can be used to create a mock object of any class even though it's final. This means that you can use expectations as usually. A unit test of `getFormattedState` method looks something like this:
{{{
        @Test
	public void testGetFormattedState_actualStateExists() throws Exception {
		final String expectedState = "state";

                // We use PowerMock.createMock(..) to create the mock object. 
		StateHolder stateHolderMock = createMock(StateHolder.class);
		StateFormatter tested = new StateFormatter(stateHolderMock);

		expect(stateHolderMock.getState()).andReturn(expectedState);

                // PowerMock.replay(..) must be used. 
		replay(stateHolderMock);

		final String actualState = tested.getFormattedState();

                // PowerMock.verify(..) must be used. 
		verify(stateHolderMock);

		assertEquals(expectedState, actualState);
	}
}}}


Note that it's imporant to use @

See the partial mocking section for information on how to mock only specific methods of a class. 

=== References === 
  * [http://code.google.com/p/powermock/source/browse/trunk/examples/DocumentationExamples/src/test/java/powermock/examples/staticmocking/ServiceRegistratorTest.java ServiceRegistratorTest]
  * [http://code.google.com/p/powermock/source/browse/trunk/examples/DocumentationExamples/src/main/java/powermock/examples/staticmocking/ServiceRegistrator.java ServiceRegistrator]
  * [http://code.google.com/p/powermock/source/browse/trunk/examples/DocumentationExamples/src/main/java/powermock/examples/staticmocking/IdGenerator.java IdGenerator]