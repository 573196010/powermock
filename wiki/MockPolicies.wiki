== Mock Policies ==

=== Quick summary ===

  # Use the `@RunWith(PowerMockRunner.class)` annotation at the class-level of the test case.
  # Use the `@MockPolicy(MyMockPolicy.class)` annotation at the class-level of the test case.

=== Example ===

A Mock Policy can be used to make it easier to unit test some code with PowerMock in isolation from a certain framework. A mock policy implementation can for example suppress some methods, suppress static initializers or intercept method calls and change their return value (for example to return a mock object) for a certain framework or set of classes or interfaces. A mock policy can for example be implemented to avoid writing repetitive setup code for your tests. Say that you're using a framework X that in order for you to test it requires that certain methods should always return a mock implementation. Perhaps some static initializers must be suppressed as well. Instead of copying this code between tests it would be a good idea to write a reusable mock policy.

PowerMock 1.1 provides three mock policies out of the box for mocking slf4j, java common-logging and log4j. Let's pick slf4j as an example and let's say you have a class that looks like this:
{{{
public class Slf4jUser {
	private static final Logger log = LoggerFactory.getLogger(Slf4jUser.class);

	public final String getMessage() {
		log.debug("getMessage!");
		return "log4j user";
	}
}
}}}

Here we have a problem because the logger gets instantiated in the static initializer of the Slf4jUser class. Sometimes this leads to problems depending on the log configuration so what you want to do in a unit-test is to stub out the log instance. This is fully doable without using mock policies. One way to do this is to start by suppressing the static initializer of the Slf4jUser class from our test. We can the set create a stub or nice mock of the Logger class and inject it to the Slf4jUser instance. But this is not enough, imagine that we've configured slf4j to use log4j as logging back-end then we'll get the following error printed in the console while running the test:

  log4j:ERROR A "org.apache.log4j.RollingFileAppender" object is not assignable to a org.apache.log4j.Appender" variable.
  log4j:ERROR The class "org.apache.log4j.Appender" was loaded by 
  log4j:ERROR [org.powermock.core.classloader.MockClassLoader@aa9835] whereas object of  type
  log4j:ERROR "org.apache.log4j.RollingFileAppender" was loaded by [sun.misc.Launcher$AppClassLoader@11b86e7].
  log4j:ERROR Could not instantiate appender named "R".

To avoid this error message we need to prepare the `org.apache.log4j.Appender` for testing. The full test setup would like this this:
{{{
@RunWith(PowerMockRunner.class)
@SuppressStaticInitializationFor("org.myapp.Slf4jUser")
@PrepareForTest( Appender.class)
public class MyTest {

  @Before
  public void setUp() {
      Logger loggerMock = createNiceMock(Logger.class);
      Whitebox.setInternalState(Slf4jUser.class, loggerMock);
      ...
  }
  ...
}
}}}
This setup behavior would have to be copied to all test classes dealing with slf4j. Instead you could use the Slf4j mock policy that take care of doing this setup for you. Your test would then look like: 
{{{
@RunWith(PowerMockRunner.class)
@MockPolicy(Slf4jMockPolicy.class)
public class Slf4jUserTest {
     ...
}
}}}
Note that we don't have do any setup at all to mock slf4j, the `Slf4jMockPolicy` takes care of this.

=== Creating custom mock policies ===
It's possible to create custom mock policies to deal with similar setup and mock behavior. To do this you need to create a class that implements the [http://code.google.com/p/powermock/source/browse/trunk/core/src/main/java/org/powermock/core/spi/PowerMockPolicy.java org.powermock.core.spi.PowerMockPolicy] interface. It contains to methods: 
{{{
void applyClassLoadingPolicy(MockPolicyClassLoadingSettings settings);
}}}
and 
{{{
void applyInterceptionPolicy(MockPolicyInterceptionSettings settings);
}}}

=== References === 
  * [http://code.google.com/p/powermock/source/browse/trunk/examples/DocumentationExamples/src/test/java/powermock/examples/staticmocking/ServiceRegistratorTest.java ServiceRegistratorTest]
  * [http://code.google.com/p/powermock/source/browse/trunk/examples/DocumentationExamples/src/main/java/powermock/examples/staticmocking/ServiceRegistrator.java ServiceRegistrator]
  * [http://code.google.com/p/powermock/source/browse/trunk/examples/DocumentationExamples/src/main/java/powermock/examples/staticmocking/IdGenerator.java IdGenerator]