#labels Usage
== Suppressing Unwanted Behavior ==

=== Quick summary ===
  # Use the `@RunWith(PowerMockRunner.class)` annotation at the class-level of the test case.
  # Use the `@PrepareForTest(ClassWithEvilChildConstructor.class)` annotation at the class-level of the test case in combination with `suppressConstructorCode(EvilChild.class)` to suppress all constructors for the EvilChild class.
  # Use the `Whitebox.newInstance(ClassWithEvilConstructor.class)` method to instantiate a class without invoking the constructor what so ever.
  # Use the `@SuppressStaticInitializationFor("org.mycompany.ClassWithEvilStaticInitializer")` annotation to remove the static initializer for the the `org.mycompany.ClassWithEvilStaticInitializer` class.
  # Use the `@PrepareForTest(ClassWithEvilMethod.class)` annotation at the class-level of the test case in combination with `suppressMethodCode(ClassWithEvilMethod.class, "methodName")` to suppress the method with name "methodName" in the ClassWithEvilMethod class.

=== Example ===
Sometimes you want or even need to suppress the behavior of certain constructors, methods or static initializers in order to unit test your own code. A classic example is when your class need to extend from another class in third-party framework of some kind. The problem arise when this 3rd party class does something in its constructor that prevents you from unit testing your own code. For example the framework may try to load a dll or access the network or file system for some reason. Let's take a look at some examples of this. 

==== Suppress super class constructors ====
As an example let's look at a class called `ExampleWithEvilChild`, it's really simple:
{{{
public class ExampleWithEvilChild extends EvilChild {

	private final String message;

	public ExampleWithEvilChild(String message) {
		this.message = message;
	}

	public String getMessage() {
		return message;
	}
}
}}}
This seems like an easy class to unit test (so easy in fact that you should probably not test it, but let's do it anyway for demonstration purposes). But wait, let's look at what the `EvilChild` class looks like:
{{{
public class EvilChild {

	public EvilChild() {
		System.loadLibrary("evil.dll");
	}
}
}}}
This child class tries to load a dll file which will not be present when you run a unit test for the `ExampleWithEvilChild` class. With PowerMock you can just suppress constructor of the EvilChild so that you can unit test the ExampleWithEvilChild class. This is done by using the `suppressConstructorCode` method of the PowerMock API. In this case we would do:
{{{
suppressConstructorCode(EvilChild.class);
}}}
You must also prepare the ExampleWithEvilChild for testing (because it is from this class that the constructor of the EvilChild is called). You do this by passing the `ExampleWithEvilChild.class` to the `@PrepareForTest` annotation: 
{{{
@PrepareForTest(ExampleWithEvilChild.class)
}}}
The full test looks like this: 
{{{
@RunWith(PowerMockRunner.class)
@PrepareForTest(ExampleWithEvilChild.class)
public class ExampleWithEvilChildTest {

	@Test
	public void testSuppressConstructorOfEvilChild() throws Exception {
		suppressConstructorCode(EvilChild.class);
		final String message = "myMessage";
		ExampleWithEvilChild tested = new ExampleWithEvilChild(message);
		assertEquals(message, tested.getMessage());
	}
}
}}}

=== References === 
  * [http://code.google.com/p/powermock/source/browse/trunk/examples/DocumentationExamples/src/test/java/powermock/examples/suppress/constructor/ExampleWithEvilChildTest.java ExampleWithEvilChildTest]
  * [http://code.google.com/p/powermock/source/browse/trunk/examples/DocumentationExamples/src/test/java/powermock/examples/suppress/constructor/ExampleWithEvilConstructorTest.java ExampleWithEvilConstructorTest]
  * [http://code.google.com/p/powermock/source/browse/trunk/examples/DocumentationExamples/src/test/java/powermock/examples/suppress/method/ExampleWithEvilMethodTest.java ExampleWithEvilMethodTest]
  * [http://code.google.com/p/powermock/source/browse/trunk/examples/DocumentationExamples/src/test/java/powermock/examples/suppress/staticinitializer/ExampleWithEvilStaticInitializerTest.java ExampleWithEvilStaticInitializerTest]
  * [http://code.google.com/p/powermock/source/browse/trunk/examples/DocumentationExamples/src/main/java/powermock/examples/suppress/constructor/ExampleWithEvilChild.java ExampleWithEvilChild]
  * [http://code.google.com/p/powermock/source/browse/trunk/examples/DocumentationExamples/src/main/java/powermock/examples/suppress/constructor/EvilChild.java EvilChild]
  * [http://code.google.com/p/powermock/source/browse/trunk/examples/DocumentationExamples/src/main/java/powermock/examples/suppress/constructor/ExampleWithEvilConstructor.java ExampleWithEvilConstructor]
  * [http://code.google.com/p/powermock/source/browse/trunk/examples/DocumentationExamples/src/main/java/powermock/examples/suppress/method/ExampleWithEvilMethod.java ExampleWithEvilMethod]
  * [http://code.google.com/p/powermock/source/browse/trunk/examples/DocumentationExamples/src/main/java/powermock/examples/suppress/staticinitializer/ExampleWithEvilStaticInitializer.java ExampleWithEvilStaticInitializer]